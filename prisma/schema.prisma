// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model User {
  userId                Int                    @id @unique @default(autoincrement())
  email                 String                 @unique
  password              String
  userRoles             UserRoles[]
  userPermissions       UserPermissions[]
  mahasiswa             Mahasiswa?
  dosenPembimbingMagang DosenPembimbingMagang?
  pembimbingLapangan    PembimbingLapangan?
  adminProvinsi         AdminProvinsi?
  adminSatker           AdminSatker?
  createdAt             DateTime?              @default(now())
  updatedAt             DateTime?              @updatedAt
}

model Roles {
  roleId          Int               @id @default(autoincrement())
  roleName        String            @unique
  userRoles       UserRoles[]
  permissionRoles PermissionRoles[]
}

model Permissions {
  permissionId    Int               @id @default(autoincrement())
  permissionName  String            @unique
  permissionRoles PermissionRoles[]
  userPermissions UserPermissions[]
}

model UserRoles {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [userId])
  userId Int
  role   Roles @relation(fields: [roleId], references: [roleId])
  roleId Int
}

model PermissionRoles {
  id           Int         @id @default(autoincrement())
  role         Roles       @relation(fields: [roleId], references: [roleId])
  roleId       Int
  permission   Permissions @relation(fields: [permissionId], references: [permissionId])
  permissionId Int
}

model UserPermissions {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [userId])
  userId       Int
  permission   Permissions @relation(fields: [permissionId], references: [permissionId])
  permissionId Int
}

model TahunAjaran {
  tahunAjaranId         Int                     @id @default(autoincrement())
  tahun                 String                  @unique
  mahasiswa             Mahasiswa[]
  dosenPembimbingMagang DosenPembimbingMagang[]
  pembimbingLapangan    PembimbingLapangan[]
}

model SatkerPilihan {
  satkerPilihanId Int       @id @default(autoincrement())
  satker          Satker    @relation(fields: [satkerId], references: [satkerId], onDelete: Cascade)
  satkerId        Int
  mahasiswa       Mahasiswa @relation(fields: [mahasiswaId], references: [mahasiswaId], onDelete: Cascade)
  mahasiswaId     Int
  status          String    @default("Menunggu")
}

model DosenPembimbingMagang {
  dosenId        Int              @id @default(autoincrement())
  nip            String           @unique
  user           User             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId         Int              @unique
  tahunAjaran    TahunAjaran      @relation(fields: [tahunAjaranId], references: [tahunAjaranId])
  tahunAjaranId  Int
  mahasiswa      Mahasiswa[]
  nama           String
  prodi          String
  bimbinganDosen BimbinganDosen[]
}

model PembimbingLapangan {
  pemlapId      Int         @id @default(autoincrement())
  nip           String      @unique
  user          User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        Int         @unique
  tahunAjaran   TahunAjaran @relation(fields: [tahunAjaranId], references: [tahunAjaranId])
  tahunAjaranId Int
  satker        Satker      @relation(fields: [kodeSatker], references: [kode])
  kodeSatker    String
  mahasiswa     Mahasiswa[]
  nama          String
}

model PenilaianBimbingan {
  penilaianId Int       @id @default(autoincrement())
  mahasiswa   Mahasiswa @relation(fields: [nim], references: [nim], onDelete: Cascade)
  nim         String    @unique
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model PenilaianLaporanDosen {
  penilaianId Int       @id @default(autoincrement())
  mahasiswa   Mahasiswa @relation(fields: [nim], references: [nim], onDelete: Cascade)
  nim         String    @unique
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model PenilaianKinerja {
  penilaianId Int       @id @default(autoincrement())
  mahasiswa   Mahasiswa @relation(fields: [nim], references: [nim], onDelete: Cascade)
  nim         String    @unique
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model PenilaianLaporanPemlap {
  penilaianId Int       @id @default(autoincrement())
  mahasiswa   Mahasiswa @relation(fields: [nim], references: [nim], onDelete: Cascade)
  nim         String    @unique
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Mahasiswa {
  mahasiswaId            Int                     @id @default(autoincrement())
  nim                    String                  @unique
  user                   User                    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                 Int                     @unique
  dosenPembimbingMagang  DosenPembimbingMagang?  @relation(fields: [nipDosen], references: [nip], onDelete: SetNull)
  nipDosen               String?
  pembimbingLapangan     PembimbingLapangan?     @relation(fields: [nipPemlap], references: [nip], onDelete: SetNull)
  nipPemlap              String?
  satker                 Satker?                 @relation(fields: [satkerId], references: [satkerId], onDelete: SetNull)
  tahunAjaran            TahunAjaran             @relation(fields: [tahunAjaranId], references: [tahunAjaranId])
  tahunAjaranId          Int
  satkerId               Int?
  nama                   String
  alamat                 String
  prodi                  String
  kelas                  String
  nomorRekening          String?
  penilaianBimbingan     PenilaianBimbingan?
  penilaianLaporanDosen  PenilaianLaporanDosen?
  penilaianKinerja       PenilaianKinerja?
  penilaianLaporanPemlap PenilaianLaporanPemlap?
  izinBimbinganSkripsi   IzinBimbinganSkripsi[]
  bimbinganDosen         BimbinganDosen[]
  kegiatanHarian         KegiatanHarian[]
  presensi               Presensi[]
  tipeKegiatan           TipeKegiatan[]
  rekapKegiatanBulanan   RekapKegiatanBulanan[]
  izinPresensi           IzinPresensi[]
  satkerPilihan          SatkerPilihan[]
}

model AdminProvinsi {
  adminProvinsiId Int             @id @default(autoincrement())
  user            User            @relation(fields: [userId], references: [userId])
  userId          Int             @unique
  provinsi        Provinsi       @relation(fields: [kodeProvinsi], references: [kodePriovinsi])
  kodeProvinsi    String          @unique
  satker          Satker[]
}

model AdminSatker {
  adminSatkerId   Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [userId])
  userId          Int           @unique
  satker          Satker?
}

model Provinsi {
  provinsiId    Int             @id @unique @default(autoincrement())
  adminProvinsi AdminProvinsi?
  kodePriovinsi String          @unique
  kabupatenKota KabupatenKota[]
  satker        Satker[]
  nama          String          @unique
}

model KabupatenKota {
  kabupatenKotaId   Int           @id @unique @default(autoincrement())
  kodeKabupatenKota String        @unique
  provinsi          Provinsi?     @relation(fields: [kodePriovinsi], references: [kodePriovinsi])
  kodePriovinsi     String
  satker            Satker?
  nama              String        @unique
}

model Satker {
  satkerId          Int             @id @unique @default(autoincrement())
  internalBPS       Boolean         @default(true)
  adminProvinsi     AdminProvinsi?  @relation(fields: [adminProvinsiId], references: [adminProvinsiId], onDelete: Cascade)
  adminProvinsiId   Int?
  adminSatker       AdminSatker?    @relation(fields: [adminSatkerId], references: [adminSatkerId])
  adminSatkerId     Int?            @unique
  provinsi          Provinsi        @relation(fields: [kodeProvinsi], references: [kodePriovinsi])
  kodeProvinsi      String
  kabupatenKota     KabupatenKota   @relation(fields: [kodeKabupatenKota], references: [kodeKabupatenKota])
  kodeKabupatenKota String          @unique
  nama              String
  kode              String          @unique
  email             String
  alamat            String
  kapasitas         Int?
  mahasiswa         Mahasiswa[]
  pembimbingLapangan PembimbingLapangan[]
  satkerPilihan     SatkerPilihan[]
}

model IzinBimbinganSkripsi {
  izinBimbinganId Int       @id @default(autoincrement())
  mahasiswa       Mahasiswa @relation(fields: [nim], references: [nim])
  nim             String
  tanggal         DateTime
  keterangan      String
  status          Boolean
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model BimbinganDosen {
  bimbinganId Int                   @id @default(autoincrement())
  mahasiswa   Mahasiswa             @relation(fields: [nim], references: [nim])
  nim         String
  dosen       DosenPembimbingMagang @relation(fields: [nipDosen], references: [nip])
  nipDosen    String
  tanggal     DateTime
  keterangan  String
  createdAt   DateTime?             @default(now())
  updatedAt   DateTime?             @updatedAt
}

model KegiatanHarian {
  kegiatanId     Int          @id @default(autoincrement())
  mahasiswa      Mahasiswa    @relation(fields: [nim], references: [nim])
  nim            String
  judul          String
  tanggal        DateTime
  deskripsi      String
  kuantitas      Int
  kualitas       Int
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @updatedAt
  tipeKegiatan   TipeKegiatan @relation(fields: [tipeKegiatanId], references: [tipeKegiatanId])
  tipeKegiatanId Int
}

model Presensi {
  presensiId Int       @id @default(autoincrement())
  mahasiswa  Mahasiswa @relation(fields: [nim], references: [nim])
  nim        String
  tanggal    DateTime
  waktu      DateTime
  keterangan String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model TipeKegiatan {
  tipeKegiatanId Int              @id @default(autoincrement())
  mahaasiswa     Mahasiswa        @relation(fields: [nim], references: [nim])
  nim            String
  nama           String
  kegiatanHarian KegiatanHarian[]
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
}

model RekapKegiatanBulanan {
  rekapId   Int       @id @default(autoincrement())
  mahasiswa Mahasiswa @relation(fields: [nim], references: [nim])
  nim       String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model IzinPresensi {
  izinId     Int       @id @default(autoincrement())
  mahasiswa  Mahasiswa @relation(fields: [nim], references: [nim])
  nim        String
  tanggal    DateTime
  waktu      DateTime
  keterangan String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model InvalidToken {
  id        Int       @id @unique @default(autoincrement())
  token     String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
