// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Shopping Mall"
}

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated/nestjs-dto"
//   outputToNestJsResourceStructure = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   fileNamingStyle                 = "camel"
// }

model User {
  userId                Int                    @id @unique @default(autoincrement())
  email                 String                 @unique
  password              String
  userRoles             UserRoles[]
  userPermissions       UserPermissions[]
  createdAt             DateTime?              @default(now())
  updatedAt             DateTime?              @updatedAt
  mahasiswa             Mahasiswa?
  dosenPembimbingMagang DosenPembimbingMagang?
  pembimbingLapangan    PembimbingLapangan?
  adminProvinsi         AdminProvinsi?
  adminSatker           AdminSatker?
}

model Roles {
  roleId          Int               @id @default(autoincrement())
  roleName        String            @unique
  userRoles       UserRoles[]
  permissionRoles PermissionRoles[]
}

model Permissions {
  permissionId    Int               @id @default(autoincrement())
  permissionName  String            @unique
  permissionRoles PermissionRoles[]
  userPermissions UserPermissions[]
}

model UserRoles {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [userId])
  userId Int
  role   Roles @relation(fields: [roleId], references: [roleId])
  roleId Int
}

model PermissionRoles {
  id           Int         @id @default(autoincrement())
  role         Roles       @relation(fields: [roleId], references: [roleId])
  roleId       Int
  permission   Permissions @relation(fields: [permissionId], references: [permissionId])
  permissionId Int
}

model UserPermissions {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [userId])
  userId       Int
  permission   Permissions @relation(fields: [permissionId], references: [permissionId])
  permissionId Int
}

model TahunAjaran {
  tahunAjaranId                 Int                             @id @default(autoincrement())
  tahun                         String                          @unique
  isActive                      Boolean                         @default(false)
  TahunAjaranDosen              TahunAjaranDosen[]
  TahunAjaranMahasiswa          TahunAjaranMahasiswa[]
  TahunAjaranPembimbingLapangan TahunAjaranPembimbingLapangan[]
}

model TahunAjaranMahasiswa {
  tahunAjaranMahasiswaId Int         @id @default(autoincrement())
  mahasiswa              Mahasiswa   @relation(fields: [mahasiswaId], references: [mahasiswaId])
  mahasiswaId            Int
  tahunAjaran            TahunAjaran @relation(fields: [tahunAjaranId], references: [tahunAjaranId])
  tahunAjaranId          Int
  createdAt              DateTime?   @default(now())
  updatedAt              DateTime?   @updatedAt
}

model TahunAjaranDosen {
  tahunAjaranDosenId Int                   @id @default(autoincrement())
  dosen              DosenPembimbingMagang @relation(fields: [dosenId], references: [dosenId])
  dosenId            Int
  tahunAjaran        TahunAjaran           @relation(fields: [tahunAjaranId], references: [tahunAjaranId])
  tahunAjaranId      Int
  createdAt          DateTime?             @default(now())
  updatedAt          DateTime?             @updatedAt
}

model TahunAjaranPembimbingLapangan {
  tahunAjaranPemlapId Int                @id @default(autoincrement())
  pemlap              PembimbingLapangan @relation(fields: [pemlapId], references: [pemlapId], onDelete: Cascade)
  pemlapId            Int
  tahunAjaran         TahunAjaran        @relation(fields: [tahunAjaranId], references: [tahunAjaranId], onDelete: Cascade)
  tahunAjaranId       Int
  createdAt           DateTime?          @default(now())
  updatedAt           DateTime?          @updatedAt
}

model DosenPembimbingMagang {
  dosenId                Int                      @id @default(autoincrement())
  nip                    String                   @unique
  user                   User                     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                 Int                      @unique
  nama                   String
  prodi                  String
  mahasiswa              Mahasiswa[]
  tahunAjaranDosen       TahunAjaranDosen[]
  pesertaBimbinganMagang PesertaBimbinganMagang[]
}

model Mahasiswa {
  mahasiswaId            Int                      @id @default(autoincrement())
  nim                    String                   @unique
  nama                   String
  alamat                 String
  prodi                  String
  kelas                  String
  nomorRekening          String?                  
  user                   User                     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                 Int                      @unique
  dosenPembimbingMagang  DosenPembimbingMagang?   @relation(fields: [nipDosen], references: [nip], onDelete: SetNull)
  nipDosen               String?
  pembimbingLapangan     PembimbingLapangan?      @relation(fields: [nipPemlap], references: [nip], onDelete: SetNull)
  nipPemlap              String?
  satker                 Satker?                  @relation(fields: [satkerId], references: [satkerId], onDelete: SetNull)
  satkerId               Int?
  tahunAjaranMahasiswa   TahunAjaranMahasiswa[]
  izinBimbinganSkripsi   IzinBimbinganSkripsi[]
  pesertaBimbinganMagang PesertaBimbinganMagang[]
  tipeKegiatan           TipeKegiatan[]
  kegiatanHarian         KegiatanHarian[]
  rekapKegiatanBulanan   RekapKegiatanBulanan[]
  presensi               Presensi[]
  izinPresensi           IzinPresensi[]
}

model AdminProvinsi {
  adminProvinsiId Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [userId])
  userId          Int      @unique
  provinsi        Provinsi @relation(fields: [kodeProvinsi], references: [kodeProvinsi])
  kodeProvinsi    String   @unique
  satker          Satker[]
}

model Provinsi {
  provinsiId    Int             @id @unique @default(autoincrement())
  nama          String          @unique
  kodeProvinsi  String          @unique
  adminProvinsi AdminProvinsi?
  kabupatenKota KabupatenKota[]
  satker        Satker[]
}

model KabupatenKota {
  kabupatenKotaId   Int       @id @unique @default(autoincrement())
  kodeKabupatenKota String    @unique
  nama              String    @unique
  provinsi          Provinsi? @relation(fields: [kodeProvinsi], references: [kodeProvinsi])
  kodeProvinsi      String
  satker            Satker?
}

model AdminSatker {
  adminSatkerId Int     @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [userId])
  userId        Int     @unique
  satker        Satker?
}

model Satker {
  satkerId           Int                  @id @unique @default(autoincrement())
  internalBPS        Boolean              @default(true)
  adminProvinsi      AdminProvinsi?       @relation(fields: [adminProvinsiId], references: [adminProvinsiId], onDelete: Cascade)
  adminProvinsiId    Int?
  adminSatker        AdminSatker?         @relation(fields: [adminSatkerId], references: [adminSatkerId])
  adminSatkerId      Int?                 @unique
  provinsi           Provinsi?            @relation(fields: [kodeProvinsi], references: [kodeProvinsi])
  kodeProvinsi       String?
  kabupatenKota      KabupatenKota?       @relation(fields: [kodeKabupatenKota], references: [kodeKabupatenKota])
  kodeKabupatenKota  String?              @unique
  nama               String
  kode               String               @unique
  email              String
  alamat             String
  kapasitas          Int?
  mahasiswa          Mahasiswa[]
  pembimbingLapangan PembimbingLapangan[]
}

model PembimbingLapangan {
  pemlapId          Int                             @id @default(autoincrement())
  nip               String                          @unique
  nama              String
  user              User                            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId            Int                             @unique
  satker            Satker                          @relation(fields: [kodeSatker], references: [kode])
  kodeSatker        String
  mahasiswa         Mahasiswa[]
  tahunAjaranPemlap TahunAjaranPembimbingLapangan[]
}

model IzinBimbinganSkripsi {
  izinBimbinganId Int       @id @default(autoincrement())
  mahasiswa       Mahasiswa @relation(fields: [nim], references: [nim])
  nim             String
  tanggal         DateTime
  keterangan      String
  status          Boolean
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model BimbinganMagang {
  bimbinganId            Int                      @id @default(autoincrement())
  tanggal                DateTime
  status                 String
  tempat                 String?
  createdAt              DateTime?                @default(now())
  updatedAt              DateTime?                @updatedAt
  nomorKelompok          Int                      @default(autoincrement())
  PesertaBimbinganMagang PesertaBimbinganMagang[]
}

model PesertaBimbinganMagang {
  pesertaBimbinganMagangId Int                   @id @default(autoincrement())
  bimbingan                BimbinganMagang       @relation(fields: [bimbinganId], references: [bimbinganId])
  bimbinganId              Int
  mahasiswa                Mahasiswa             @relation(fields: [nim], references: [nim])
  nim                      String
  dosen                    DosenPembimbingMagang @relation(fields: [nipDosen], references: [nip])
  nipDosen                 String
  createdAt                DateTime?             @default(now())
  updatedAt                DateTime?             @updatedAt
}

model TipeKegiatan {
  tipeKegiatanId Int              @id @default(autoincrement())
  mahasiswa      Mahasiswa        @relation(fields: [nim], references: [nim])
  nim            String
  nama           String
  kegiatanHarian KegiatanHarian[]
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
}

model KegiatanHarian {
  kegiatanId         Int           @id @default(autoincrement())
  mahasiswa          Mahasiswa     @relation(fields: [nim], references: [nim])
  nim                String
  tanggal            DateTime
  deskripsi          String
  volume             Int
  satuan             String
  durasi             Int
  pemberiTugas       String
  statusPenyelesaian Int           @default(0)
  createdAt          DateTime?     @default(now())
  updatedAt          DateTime?     @updatedAt
  tipeKegiatan       TipeKegiatan? @relation(fields: [tipeKegiatanId], references: [tipeKegiatanId])
  tipeKegiatanId     Int?
}

model RekapKegiatanBulanan {
  rekapId         Int       @id @default(autoincrement())
  mahasiswa       Mahasiswa @relation(fields: [nim], references: [nim])
  nim             String
  periode         String
  uraian          String
  satuan          String
  target          Int
  realisasi       Int
  persentase      Int
  tingkatKualitas Int?
  keterangan      String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model Presensi {
  presensiId  Int       @id @default(autoincrement())
  mahasiswa   Mahasiswa @relation(fields: [nim], references: [nim])
  nim         String
  tanggal     DateTime
  waktuDatang DateTime
  waktuPulang DateTime
  status      String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model IzinPresensi {
  izinId     Int       @id @default(autoincrement())
  mahasiswa  Mahasiswa @relation(fields: [nim], references: [nim])
  nim        String
  tanggal    DateTime
  waktu      DateTime
  keterangan String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model InvalidToken {
  id        Int       @id @unique @default(autoincrement())
  token     String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model PilihanSatker {
  pilihanSatkerId Int       @id @default(autoincrement())
  nim             String
  kodeSatker      String
  status          String    @default("Menunggu")
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}
