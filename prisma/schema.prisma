// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Shopping Mall"
}

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated/nestjs-dto"
//   outputToNestJsResourceStructure = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   fileNamingStyle                 = "camel"
// }

model TahunAjaran {
  tahunAjaranId              Int                          @id @default(autoincrement())
  tahun                      String                       @unique
  isActive                   Boolean                      @default(false)
  user                       User[]
  kapasitasSatkerTahunAjaran KapasitasSatkerTahunAjaran[]
}

model User {
  userId                Int                    @id @default(autoincrement())
  email                 String
  password              String
  tahunAjaran           TahunAjaran            @relation(fields: [tahunAjaranId], references: [tahunAjaranId], onDelete: Cascade, onUpdate: Cascade)
  tahunAjaranId         Int
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  mahasiswa             Mahasiswa?
  adminSatker           AdminSatker?
  adminProvinsi         AdminProvinsi?
  pembimbingLapangan    PembimbingLapangan?
  dosenPembimbingMagang DosenPembimbingMagang?
  userRoles             UserRoles[]
  userPermissions       UserPermissions[]
}

model Roles {
  roleId          Int               @id @default(autoincrement())
  roleName        String            @unique
  userRoles       UserRoles[]
  permissionRoles PermissionRoles[]
}

model Permissions {
  permissionId    Int               @id @default(autoincrement())
  permissionName  String            @unique
  permissionRoles PermissionRoles[]
  userPermissions UserPermissions[]
}

model UserRoles {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  role   Roles @relation(fields: [roleId], references: [roleId], onDelete: Cascade, onUpdate: Cascade)
  roleId Int
}

model PermissionRoles {
  id           Int         @id @default(autoincrement())
  role         Roles       @relation(fields: [roleId], references: [roleId], onDelete: Cascade, onUpdate: Cascade)
  roleId       Int
  permission   Permissions @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade, onUpdate: Cascade)
  permissionId Int
}

model UserPermissions {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId       Int
  permission   Permissions @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade, onUpdate: Cascade)
  permissionId Int
}

model DosenPembimbingMagang {
  dosenId         Int               @id @default(autoincrement())
  nip             String
  nama            String
  prodi           String
  user            User              @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId          Int               @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  mahasiswa       Mahasiswa[]
  bimbinganMagang BimbinganMagang[]
}

model Mahasiswa {
  mahasiswaId            Int                         @id @default(autoincrement())
  nim                    String
  nama                   String
  prodi                  String
  kelas                  String
  alamat                 String
  nomorRekening          String?
  dosenPembimbingMagang  DosenPembimbingMagang?      @relation(fields: [dosenId], references: [dosenId], onDelete: SetNull, onUpdate: Cascade)
  dosenId                Int?
  pembimbingLapangan     PembimbingLapangan?         @relation(fields: [pemlapId], references: [pemlapId], onDelete: SetNull, onUpdate: Cascade)
  pemlapId               Int?
  user                   User?                       @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId                 Int?                        @unique
  satker                 Satker?                     @relation(fields: [satkerId], references: [satkerId], onDelete: SetNull, onUpdate: Cascade)
  satkerId               Int?
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt
  presensi               Presensi[]
  tipeKegiatan           TipeKegiatan[]
  izinPresensi           IzinPresensi[]
  kegiatanHarian         KegiatanHarian[]
  rekapKegiatanBulanan   RekapKegiatanBulanan[]
  izinBimbinganSkripsi   IzinBimbinganSkripsi[]
  pesertaBimbinganMagang PesertaBimbinganMahasiswa[]
}

model AdminProvinsi {
  adminProvinsiId Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId          Int      @unique
  provinsi        Provinsi @relation(fields: [provinsiId], references: [provinsiId], onDelete: Cascade, onUpdate: Cascade)
  provinsiId      Int      @unique
  satker          Satker[]
}

model Provinsi {
  provinsiId    Int             @id @default(autoincrement())
  nama          String
  kodeProvinsi  String          @unique
  adminProvinsi AdminProvinsi?
  satker        Satker[]
  kabupatenKota KabupatenKota[]
}

model KabupatenKota {
  kabupatenKotaId   Int      @id @unique @default(autoincrement())
  kodeKabupatenKota String   @unique
  nama              String
  provinsi          Provinsi @relation(fields: [provinsiId], references: [provinsiId], onDelete: Cascade, onUpdate: Cascade)
  provinsiId        Int
  satker            Satker?
}

model AdminSatker {
  adminSatkerId Int     @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId        Int     @unique
  satker        Satker?
}

model Satker {
  satkerId                   Int                          @id @default(autoincrement())
  nama                       String
  kodeSatker                 String                       @unique
  email                      String
  alamat                     String
  internalBPS                Boolean                      @default(true)
  adminProvinsi              AdminProvinsi?               @relation(fields: [adminProvinsiId], references: [adminProvinsiId], onDelete: SetNull, onUpdate: Cascade)
  adminProvinsiId            Int?
  adminSatker                AdminSatker?                 @relation(fields: [adminSatkerId], references: [adminSatkerId], onDelete: SetNull, onUpdate: Cascade)
  adminSatkerId              Int?                         @unique
  provinsi                   Provinsi                     @relation(fields: [povinsiId], references: [provinsiId], onDelete: Cascade, onUpdate: Cascade)
  povinsiId                  Int
  kabupatenKota              KabupatenKota                @relation(fields: [kabupatenKotaId], references: [kabupatenKotaId], onDelete: Cascade, onUpdate: Cascade)
  kabupatenKotaId            Int                          @unique
  mahasiswa                  Mahasiswa[]
  pembimbingLapangan         PembimbingLapangan[]
  kapasitasSatkerTahunAjaran KapasitasSatkerTahunAjaran[]
}

model KapasitasSatkerTahunAjaran {
  kapasitasId   Int         @id @default(autoincrement())
  satker        Satker      @relation(fields: [satkerId], references: [satkerId], onDelete: Cascade, onUpdate: Cascade)
  satkerId      Int
  tahunAjaran   TahunAjaran @relation(fields: [tahunAjaranId], references: [tahunAjaranId], onDelete: Cascade, onUpdate: Cascade)
  tahunAjaranId Int
  kapasitas     Int?

  @@unique([satkerId, tahunAjaranId])
}

model PembimbingLapangan {
  pemlapId  Int         @id @default(autoincrement())
  nip       String
  nama      String
  user      User        @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId    Int         @unique
  satker    Satker      @relation(fields: [satkerId], references: [satkerId], onDelete: Cascade, onUpdate: Cascade)
  satkerId  Int
  mahasiswa Mahasiswa[]
}

model IzinBimbinganSkripsi {
  izinBimbinganId Int       @id @default(autoincrement())
  tanggal         DateTime
  keterangan      String
  status          String
  mahasiswa       Mahasiswa @relation(fields: [mahasiswaId], references: [mahasiswaId], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId     Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model BimbinganMagang {
  bimbinganId               Int                         @id @default(autoincrement())
  tanggal                   DateTime
  status                    String
  tempat                    String?
  dosenPembimbingMagang     DosenPembimbingMagang       @relation(fields: [dosenId], references: [dosenId], onDelete: Cascade, onUpdate: Cascade)
  dosenId                   Int
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  PesertaBimbinganMahasiswa PesertaBimbinganMahasiswa[]
}

model PesertaBimbinganMahasiswa {
  pesertaBimbinganMagangId Int             @id @default(autoincrement())
  bimbingan                BimbinganMagang @relation(fields: [bimbinganId], references: [bimbinganId], onDelete: Cascade, onUpdate: Cascade)
  bimbinganId              Int
  mahasiswa                Mahasiswa       @relation(fields: [mahasiswaId], references: [mahasiswaId], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId              Int
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
}

model TipeKegiatan {
  tipeKegiatanId Int              @id @default(autoincrement())
  nama           String
  mahasiswa      Mahasiswa        @relation(fields: [mahasiswaId], references: [mahasiswaId], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId    Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  kegiatanHarian KegiatanHarian[]
}

model KegiatanHarian {
  kegiatanId         Int           @id @default(autoincrement())
  tanggal            DateTime
  deskripsi          String
  volume             Int           @default(0)
  satuan             String
  durasi             Int           @default(0)
  pemberiTugas       String
  statusPenyelesaian Int           @default(0)
  mahasiswa          Mahasiswa     @relation(fields: [mahasiswaId], references: [mahasiswaId], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId        Int
  tipeKegiatan       TipeKegiatan? @relation(fields: [tipeKegiatanId], references: [tipeKegiatanId], onDelete: SetNull, onUpdate: Cascade)
  tipeKegiatanId     Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model RekapKegiatanBulanan {
  rekapId         Int       @id @default(autoincrement())
  periode         String
  uraian          String
  satuan          String
  target          Int       @default(0)
  realisasi       Int       @default(0)
  persentase      Int       @default(0)
  tingkatKualitas Int?
  keterangan      String?
  mahasiswa       Mahasiswa @relation(fields: [mahasiswaId], references: [mahasiswaId], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId     Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Presensi {
  presensiId  Int       @id @default(autoincrement())
  tanggal     DateTime
  waktuDatang DateTime
  waktuPulang DateTime
  status      String
  mahasiswa   Mahasiswa @relation(fields: [mahasiswaId], references: [mahasiswaId], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model IzinPresensi {
  izinId      Int       @id @default(autoincrement())
  tanggal     DateTime
  waktu       DateTime
  keterangan  String
  mahasiswa   Mahasiswa @relation(fields: [mahasiswaId], references: [mahasiswaId], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model InvalidToken {
  id        Int       @id @unique @default(autoincrement())
  token     String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model PilihanSatker {
  pilihanSatkerId Int      @id @default(autoincrement())
  mahasiswaId     Int
  satkerId        Int
  status          String   @default("Menunggu")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
